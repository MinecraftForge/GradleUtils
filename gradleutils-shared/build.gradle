import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.ShadowJavaPlugin
import org.gradle.api.attributes.plugin.GradlePluginApiVersion

plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'io.freefair.javadoc-links'
    id 'net.minecraftforge.gradleutils'
    alias libs.plugins.licenser
    alias libs.plugins.gitversion
    alias libs.plugins.shadow
}

final projectDisplayName = 'Minecraft Forge Shared Plugin Base'
final projectArtifactId = base.archivesName = 'gradleutils-shared'
description = 'The shared base used by all of Minecraft Forge\'s Gradle plugins'
group = 'net.minecraftforge'
version = gitversion.tagOffset

println "Version: $version"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
    withJavadocJar()
}

configurations {
    // Applies the "Gradle Plugin API Version" attribute to configuration
    // This was added in Gradle 7, gives consumers useful errors if they are on an old version
    def applyGradleVersionAttribute = { Configuration configuration ->
        configuration.attributes {
            attribute(GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE, objects.named(GradlePluginApiVersion, libs.versions.gradle.asProvider().get()))
        }
    }

    named(JavaPlugin.RUNTIME_ELEMENTS_CONFIGURATION_NAME, applyGradleVersionAttribute)
    named(ShadowJavaPlugin.SHADOW_RUNTIME_ELEMENTS_CONFIGURATION_NAME, applyGradleVersionAttribute)
}

dependencies {
    // Static Analysis
    compileOnly libs.nulls

    // Gradle API
    compileOnly libs.gradle

    // Tools
    implementation libs.bundles.utils
}

license {
    header = rootProject.file('LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

tasks.named('jar', Jar) {
    archiveClassifier = 'thin'
}

tasks.named('shadowJar', ShadowJar) {
    enableAutoRelocation = true
    archiveClassifier = null
    relocationPrefix = 'net.minecraftforge.gradleutils.shared.shadow'
}

tasks.withType(Javadoc).configureEach {
    javadocTool = javaToolchains.javadocToolFor { languageVersion = JavaLanguageVersion.of(24) }

    options { StandardJavadocDocletOptions options ->
        options.windowTitle = projectDisplayName + project.version
        options.tags 'apiNote:a:API Note:', 'implNote:a:Implementation Note:', 'implSpec:a:Implementation Requirements:'
    }
}

// Allows the thin jar to be published, but won't be considered as the java-runtime variant in the module
// This forces Gradle to use the fat jar when applying the plugin
(components.java as AdhocComponentWithVariants).withVariantsFromConfiguration(configurations.runtimeElements) {
    skip()
}

publishing {
    publications.register('mavenJava', MavenPublication) {
        from components.java
        artifactId = projectArtifactId

        pom { pom ->
            name = projectDisplayName
            description = project.description

            gradleutils.pom.addRemoteDetails(pom)

            licenses {
                license gradleutils.pom.licenses.LGPLv2_1
            }

            developers {
                developer gradleutils.pom.developers.Jonathing
            }
        }
    }

    repositories {
        maven gradleutils.publishingForgeMaven
    }
}

idea.module { downloadSources = downloadJavadoc = true }
eclipse.classpath { downloadSources = downloadJavadoc = true }
