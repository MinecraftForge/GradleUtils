import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.ShadowJavaPlugin
import org.gradle.api.attributes.plugin.GradlePluginApiVersion

plugins {
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    //id 'io.freefair.javadoc-links'
    id 'net.minecraftforge.gradleutils'
    alias libs.plugins.licenser
    alias libs.plugins.shadow
}

gradleutils.displayName = 'GradleUtils Shared'
description = 'The shared base used by all of Forge\'s Gradle plugins.'
base.archivesName = 'gradleutils-shared'
group = 'net.minecraftforge'
// version set by gitversion in settings.gradle

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
    //withJavadocJar()
}

dependencies {
    // Static Analysis
    compileOnly libs.nulls

    // Gradle API
    compileOnly libs.gradle

    // Tools
    implementation sharedLibs.bundles.utils
}

license {
    header = rootProject.file('LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

tasks.named('jar', Jar) {
    archiveClassifier = 'thin'
}

tasks.named('shadowJar', ShadowJar) {
    enableAutoRelocation = true
    archiveClassifier = null
    relocationPrefix = 'net.minecraftforge.gradleutils.shared.shadow'
}

tasks.withType(Javadoc).configureEach {
    javadocTool = javaToolchains.javadocToolFor { languageVersion = JavaLanguageVersion.of(24) }
}

// Allows the thin jar to be published, but won't be considered as the java-runtime variant in the module
// This forces Gradle to use the fat jar when consuming this as a runtime dependency
(components.java as AdhocComponentWithVariants).withVariantsFromConfiguration(configurations.runtimeElements) {
    skip()
}

publishing {
    repositories {
        maven gradleutils.publishingForgeMaven
    }

    publications.register('mavenJava', MavenPublication) {
        from components.java

        gradleutils.promote(it)

        pom { pom ->
            name = gradleutils.displayName
            description = project.description

            gradleutils.pom.addRemoteDetails(pom)

            licenses {
                license gradleutils.pom.licenses.LGPLv2_1
            }

            developers {
                developer gradleutils.pom.developers.Jonathing
            }
        }
    }
}
