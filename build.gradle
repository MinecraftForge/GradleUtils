import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.api.attributes.plugin.GradlePluginApiVersion
import net.minecraftforge.gradleutils.GradleUtilsExtension

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'io.freefair.javadoc-links'
    id 'net.minecraftforge.gradleutils'
    alias libs.plugins.licenser
    alias libs.plugins.gitversion
    alias libs.plugins.changelog
    alias libs.plugins.plugin.publish
    alias libs.plugins.shadow
}

final projectDisplayName = 'Forge Gradle Utilities'
final projectArtifactId = base.archivesName = 'gradleutils'
description = 'Small collection of utilities for standardizing MinecraftForge gradle scripts'
group = 'net.minecraftforge'
version = gitversion.tagOffset

println "Version: $version"

// This plugin being applied to settings.gradle first also affects linting in the build.gradle
// https://youtrack.jetbrains.com/issue/IDEA-332061/Gradle-Missing-Code-Completion-Suggestions-for-Settings-Plugins-in-Groovy-DSL
final gradleutils = extensions.getByType(GradleUtilsExtension.ForProject)

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
    withJavadocJar()
}

configurations {
    named(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME) {
        // Fixes a conflict between Git Version's shadowed SLF4J from JGit and Gradle's own loggers
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    // Applies the "Gradle Plugin API Version" attribute to configuration
    // This was added in Gradle 7, gives consumers useful errors if they are on an old version
    def applyGradleVersionAttribute = { Configuration configuration ->
        configuration.attributes {
            attribute(GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE, objects.named(GradlePluginApiVersion, libs.versions.gradle.asProvider().get()))
        }
    }

    named('runtimeElements', applyGradleVersionAttribute)
    named('shadowRuntimeElements', applyGradleVersionAttribute)
}

dependencies {
    // Gradle API
    compileOnly libs.bundles.gradle

    // JavaDoc Links Plugin
    compileOnly libs.gradle.javadoc.links

    // GitHub Actions Workflows
    implementation libs.yaml

    // Tools
    implementation libs.bundles.utils
}

// Removes local Gradle API from compileOnly. This is a workaround for bugged plugins.
// TODO [GradleUtils][GradleAPI] Remove this once they are fixed.
// Publish Plugin: https://github.com/gradle/plugin-portal-requests/issues/260
// Shadow:         https://github.com/GradleUp/shadow/pull/1422
afterEvaluate { project ->
    project.configurations.named(JavaPlugin.COMPILE_ONLY_CONFIGURATION_NAME) { compileOnly ->
        compileOnly.dependencies.remove project.dependencies.gradleApi()
    }
}

license {
    header = rootProject.file('LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

tasks.named('jar', Jar) {
    archiveClassifier = 'thin'
}

tasks.named('shadowJar', ShadowJar) {
    enableAutoRelocation = true
    archiveClassifier = null
    relocationPrefix = 'net.minecraftforge.gradleutils.shadow'
}

tasks.withType(GroovyCompile).configureEach {
    groovyOptions.optimizationOptions.indy = true
}

tasks.withType(Javadoc).configureEach {
    javadocTool = javaToolchains.javadocToolFor { languageVersion = JavaLanguageVersion.of(24) }

    options { StandardJavadocDocletOptions options ->
        options.windowTitle = projectDisplayName + project.version
        options.tags 'apiNote:a:API Note:', 'implNote:a:Implementation Note:', 'implSpec:a:Implementation Requirements:'
    }
}

changelog {
    fromBase()
    publishAll = false
}

gradlePlugin {
    website = gitversion.url
    vcsUrl = gitversion.url + '.git'

    plugins.register('gradleutils') {
        id = 'net.minecraftforge.gradleutils'
        implementationClass = 'net.minecraftforge.gradleutils.GradleUtilsPlugin'
        displayName = projectDisplayName
        description = project.description
        tags.set(['minecraftforge'])
    }
}

// Allows the thin jar to be published, but won't be considered as the java-runtime variant in the module
// This forces Gradle to use the fat jar when applying the plugin
(components.java as AdhocComponentWithVariants).withVariantsFromConfiguration(configurations.runtimeElements) {
    skip()
}

publishing {
    publications.register('pluginMaven', MavenPublication) {
        artifactId = projectArtifactId
        changelog.publish it

        pom { pom ->
            name = projectDisplayName
            description = project.description

            gradleutils.pom.addRemoteDetails(pom)

            licenses {
                license gradleutils.pom.licenses.LGPLv2_1
            }

            developers {
                developer gradleutils.pom.developers.Jonathing
                developer gradleutils.pom.developers.Paint_Ninja
                developer gradleutils.pom.developers.LexManos
            }
        }
    }

    repositories {
        maven gradleutils.publishingForgeMaven
    }
}

idea.module { downloadSources = downloadJavadoc = true }
