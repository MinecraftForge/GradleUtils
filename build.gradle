import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    alias libs.plugins.licenser
    alias libs.plugins.gradleutils
    alias libs.plugins.plugin.publish
    alias libs.plugins.shadow
}

final projectDisplayName = 'Forge Gradle Utilities'
description = 'Small collection of utilities for standardizing MinecraftForge gradle scripts'
group = 'net.minecraftforge'
version = gitversion.tagOffset

println "Version: $version"

// GitVersion requires Java 17
java.toolchain.languageVersion = JavaLanguageVersion.of 17

tasks.withType(GroovyCompile).configureEach {
    groovyOptions.optimizationOptions.indy = true
}

configurations {
    runtimeClasspath {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
}

dependencies {
    // GitHub Actions Workflows
    implementation libs.yaml

    // Git Version
    implementation libs.gitver

    // TODO - Deprecated git utilities, remove in 3.0
    implementation libs.jgit
}

license {
    header = file('LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

tasks.named('jar', Jar) {
    archiveClassifier = 'thin'
}

tasks.named('shadowJar', ShadowJar) {
    enableRelocation = true
    archiveClassifier = null
    relocationPrefix = 'net.minecraftforge.gradleutils.shadow'
}

javadoc.enabled = false
groovydoc.use = true

// javadocJar is created after evaluation, so we need to configure it here
afterEvaluate {
    tasks.named('javadocJar', Jar) {
        dependsOn tasks.named('groovydoc', Groovydoc)
        from groovydoc.destinationDir
    }
}

changelog {
    fromBase()
    publishAll = false
}

gradlePlugin {
    website.set gitversion.url
    vcsUrl.set gitversion.url + '.git'

    plugins {
        register('gradleutils') {
            id = 'net.minecraftforge.gradleutils'
            implementationClass = 'net.minecraftforge.gradleutils.GradleUtilsPlugin'
            displayName = projectDisplayName
            description = project.description
            tags = ['minecraftforge']
        }
        register('changelog') {
            id = 'net.minecraftforge.changelog'
            implementationClass = 'net.minecraftforge.gradleutils.changelog.ChangelogPlugin'
            displayName = 'Git Changelog'
            description = 'Creates a changelog text file based on git history using GitVersion'
            tags = ['git', 'changelog']
        }
    }
}

publishing {
    publications.register('pluginMaven', MavenPublication) {
        artifactId = project.name
        changelog.publish it

        pom { pom ->
            name = projectDisplayName
            description = project.description

            gradleutils.pom.setGitHubDetails pom

            licenses {
                license gradleutils.pom.licenses.LGPLv2_1
            }

            // TODO [GradleUtils] Re-evaluate active developers in GU 3.0
            developers {
                developer gradleutils.pom.developers.LexManos
                developer gradleutils.pom.developers.SizableShrimp
                developer gradleutils.pom.developers.Paint_Ninja
                developer gradleutils.pom.developers.Jonathing
            }
        }
    }

    repositories {
        maven gradleutils.publishingForgeMaven
    }
}

idea.module { downloadSources = downloadJavadoc = true }
