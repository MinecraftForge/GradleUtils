import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    alias libs.plugins.versions
    alias libs.plugins.licenser
    alias libs.plugins.gradleutils
    alias libs.plugins.gitversion
    alias libs.plugins.changelog
    alias libs.plugins.plugin.publish
    alias libs.plugins.shadow
}

gradleutils.displayName = 'Forge Gradle Utilities'
description = "Small collection of utilities for standardizing Forge's buildscripts."
group = 'net.minecraftforge'
version = gitversion.tagOffset

println "Version: $version"

// Git Version requires Java 17
java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
    withJavadocJar()
}

gradleutils.pluginDevDefaults(configurations, libs.versions.gradle)

configurations {
    named(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME) {
        // Fixes a conflict between Git Version's shadowed SLF4J from JGit and Gradle's own loggers
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
}

dependencies {
    // Static Analysis
    compileOnly libs.nulls

    // Gradle API
    compileOnly libs.gradle

    // Versions Plugin
    compileOnly libs.gradle.versions

    // GitHub Actions Workflows
    implementation libs.yaml

    // Git Version
    implementation libs.gitver

    // Backwards compatibility
    implementation libs.jgit
}

license {
    header = rootProject.file('LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

tasks.named('javadoc', Javadoc) {
    // Groovydoc is used instead
    enabled = false
}

tasks.named('groovydoc', Groovydoc) {
    use = true

    exclude '**/EnhancedVersionReporter.java'
}

tasks.named('jar', Jar) {
    archiveClassifier = 'thin'
}

tasks.named('shadowJar', ShadowJar) {
    enableAutoRelocation = true
    archiveClassifier = null
    relocationPrefix = 'net.minecraftforge.gradleutils.shadow'
}

// javadocJar is created after evaluation, so we need to configure it here
afterEvaluate {
    tasks.named('javadocJar', Jar) {
        final groovydoc = tasks.named('groovydoc', Groovydoc)

        dependsOn = [groovydoc]
        archiveClassifier = 'groovydoc'
        from groovydoc.map(Groovydoc.&getDestinationDir)
    }
}

changelog {
    fromBase()
}

gradlePlugin {
    website.set gitversion.url
    vcsUrl.set gitversion.url + '.git'

    plugins {
        register('gradleutils') {
            id = 'net.minecraftforge.gradleutils'
            implementationClass = 'net.minecraftforge.gradleutils.GradleUtilsPlugin'
            displayName = project.gradleutils.displayName.get() // project. before gradleutils otherwise it would reference itself
            description = project.description
            tags = ['minecraftforge']
        }
        register('changelog') {
            id = 'net.minecraftforge.changelog'
            implementationClass = 'net.minecraftforge.gradleutils.changelog.ChangelogPlugin'
            displayName = 'Git Changelog'
            description = 'Creates a changelog text file based on git history using Git Version'
            tags = ['git', 'changelog']
        }
    }
}

publishing {
    repositories {
        maven gradleutils.publishingForgeMaven
    }

    publications.register('pluginMaven', MavenPublication) {
        changelog.publish(it)
        gradleutils.promote(it)

        pom { pom ->
            name = gradleutils.displayName
            description = project.description

            gradleutils.pom.addRemoteDetails(pom)

            licenses {
                license gradleutils.pom.licenses.LGPLv2_1
            }

            // TODO [GradleUtils][GU3.0] Re-evaluate active developers in GU 3.0
            developers {
                developer gradleutils.pom.developers.LexManos
                developer gradleutils.pom.developers.SizableShrimp
                developer gradleutils.pom.developers.Paint_Ninja
                developer gradleutils.pom.developers.Jonathing
            }
        }
    }
}
